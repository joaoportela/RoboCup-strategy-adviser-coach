/*
 * $Header: $
 */

package soccerscope.view.layer ;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

import soccerscope.model.*;
import soccerscope.util.Color2;
import soccerscope.util.geom.*;
import soccerscope.view.FieldPane;

public class KickableLayer extends Layer implements ActionListener {
    
    public KickableLayer(FieldPane fieldPane, boolean enable) {
	super(fieldPane, enable);
    }

    public String getLayerName() {
	return "Kickable";
    }

    private boolean dtackle = false;
    private JCheckBox tackleCB;
    public JPanel getConfigPanel() {
	JPanel panel = new JPanel();
	
	tackleCB = new JCheckBox("Tackle Area");
	tackleCB.addActionListener(this);
	panel.add(tackleCB);
	
	return panel;
    }

    public void actionPerformed(ActionEvent ie) {
	Object o = ie.getSource();
	boolean b = ((AbstractButton)o).isSelected();
	if (o == tackleCB)
	    dtackle = b;
    }

    private Vector2f diff    = new Vector2f();
    private Point2f nextPos = new Point2f();
    public void draw(Graphics g) {
	if (!enable) return ;

	Scene scene = fieldPane.getScene();
	float ballMagnify = fieldPane.getBallMagnify();
	float playerMagnify = fieldPane.getPlayerMagnify();
	for (int i = 0; i < Param.MAX_PLAYER * 2; i++) {
	    if (!scene.player[i].isEnable()) continue;
	    
	    float playerR = scene.player[i].getPlayerSize() * playerMagnify;
	    Color drawColor = scene.player[i].getColor();
	    
	    // draw kickable and catchable area
	    float drawR;
		drawR = Param.KICKABLE_R;
	    if (scene.player[i].isKicking()) {
		if (scene.player[i].isKickFault())
		    g.setColor(drawColor.darker().darker());
		else
		    g.setColor(drawColor.darker());
		Graphics2D g2 = (Graphics2D) g;

		g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.3f));
		fillCircle(g, scene.player[i].pos, drawR);
		g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1.0f));
	    }
	    g.setColor(drawColor);
	    drawCircle(g, scene.player[i].pos, drawR);

	    if (scene.player[i].isGoalie()) {
		drawR = Param.GOALIE_CATCHABLE_AREA_LENGTH;
		if (scene.player[i].isCatching()) {
		    if (scene.player[i].isCatchFault())
			g.setColor(drawColor.darker().darker());
		    else
			g.setColor(drawColor.darker());
		    fillCircle(g, scene.player[i].pos, drawR);
		}
		g.setColor(drawColor);
		drawCircle(g, scene.player[i].pos, drawR);
	    }
	    
	    if (scene.player[i].isTackling()) {
		if (scene.player[i].isTackleFault())
		    g.setColor(drawColor.darker().darker());
		else
		    g.setColor(drawColor.darker());		    
		if (dtackle) {
		    fillRect(g, new Point2f(scene.player[i].pos.x,
					    scene.player[i].pos.y - Param.TACKLE_WIDTH/2),
			     new Point2f(Param.TACKLE_DIST,
					 Param.TACKLE_WIDTH),
			     (int)scene.player[i].angle,
			     scene.player[i].pos);
		}
	    }

	    g.setColor(drawColor);
	    if (dtackle) {
		drawRect(g, new Point2f(scene.player[i].pos.x,
					scene.player[i].pos.y - Param.TACKLE_WIDTH/2),
			 new Point2f(Param.TACKLE_DIST,
				     Param.TACKLE_WIDTH),
			 (int)scene.player[i].angle,
			 scene.player[i].pos);
	    }
	    
	    if (scene.player[i].isKickable(scene.ball.pos)) {
		Vector2f acc = scene.player[i].getKickAccelerate(scene.ball.pos, 100.0f,  0.0f);
		float kickableRange = acc.length();
		nextPos.add(scene.ball.pos, scene.ball.vel);
		drawCircle(g, nextPos, kickableRange);
	    }
	    
	    if (dtackle && scene.player[i].canTackle(scene.ball.pos)) {
		float prob= scene.player[i].getTackleProb(scene.ball.pos);
		Point2f drawPoint = new Point2f();
		Point2f drawOffset = new Point2f(0.0f, playerR*2.0f);
		drawPoint.add(scene.player[i].pos, drawOffset);
		drawString(g, String.valueOf(prob), drawPoint);
	    }
	}
    }
}
